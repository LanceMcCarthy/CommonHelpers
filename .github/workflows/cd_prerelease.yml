name: Prerelease

on:
  push:
    branches:
      - prerelease

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
    
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3

    - name: Add Release Candidate (-rc) suffix to Version Number
      run : |
        [xml]$projXml = get-content "src\CommonHelpers\CommonHelpers.csproj"
        $currentVer = $projXml.Project.PropertyGroup.Version
        $suffix = "-rc"
        $newVer = $currentVer + $suffix
        $projXml.Project.PropertyGroup.Version = $newVer
        $projXml.save("src\CommonHelpers\CommonHelpers.csproj")

    - name: Install MAUI workloads (required for GitHub-hosted runners)
      shell: pwsh
      run: dotnet workload install maui --source https://api.nuget.org/v3/index.json

    - name: NuGet Restore
      run: dotnet restore src/CommonHelpers.sln --runtime any

    - name: Build
      run: dotnet build src/CommonHelpers.sln --configuration Release
    
    - name: Run Tests
      run: dotnet test src/CommonHelpers.Tests/CommonHelpers.Tests.csproj --runtime any


    # ***** Nuget Package Path Identification ***** #

    - name: Get Version From Project
      uses: kzrnm/get-net-sdk-project-versions-action@v1.3.0
      id: get-version
      with:
        proj-path: src/CommonHelpers/CommonHelpers.csproj

    - name: Verify version
      run: Write-Output "Version is ${{ steps.get-version.outputs.package-version }}"

    - name: Get Package File Path
      id: get-package-path
      run : |
        $currentDirectory = Get-Location
        $outputFolder = Join-Path -Path $currentDirectory -ChildPath "src/CommonHelpers/bin/Release/"
        $match = Get-ChildItem $outputFolder -Recurse -Force -Include *.nupkg
        Write-Output "Setting output variable 'nuget-package-path' to $match"
        Write-Output "::set-output name=nuget-package-path::$match"
    
    - name: Verify Package Path
      run: Write-Output "Package path is ${{ steps.get-package-path.outputs.nuget-package-path }}"


    # ***** NuGet Package Signing ***** #

    - name: Decode Base64 and save PFX file
      id: download-cert
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.LANCELOTSOFTWARECERT_BASE64 }}")
        $currentDirectory = Get-Location
        $certificatePath = Join-Path -Path $currentDirectory -ChildPath "LancelotSoftware.pfx"
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
        Write-Output "Setting output variable 'certificate-path'..."
        Write-Output "::set-output name=certificate-path::$certificatePath"

    - name: Sign NuGet package
      run: dotnet nuget sign ${{ steps.get-package-path.outputs.nuget-package-path }} --certificate-path ${{ steps.download-cert.outputs.certificate-path }} --certificate-password "${{ secrets.LANCELOTSOFTWARECERT_PASSWORD }}" --timestamper "http://timestamp.digicert.com"


    # ***** NuGet.org Release ***** #
    
    - name: Publish to NuGet.org
      run: dotnet nuget push ${{ steps.get-package-path.outputs.nuget-package-path }} --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}


    # ***** GitHub Release ***** #

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v.${{ steps.get-version.outputs.package-version }}-rc ${{ env.GITHUB_RUN_ID }}"
        release_name: "Prelease ${{ steps.get-version.outputs.package-version }}"
        draft: false
        prerelease: true

    - name: Publish preview
      id: upload-sideload-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.get-package-path.outputs.nuget-package-path }}
        asset_name: "CommonHelpers.${{ steps.get-version.outputs.package-version }}.nupkg"
        asset_content_type: application/zip
